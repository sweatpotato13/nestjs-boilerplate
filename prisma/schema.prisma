generator client {
  provider = "prisma-client-js"
}

generator prismaClassGenerator {
  provider                 = "prisma-class-generator"
  output                   = "../src/shared/entities"
  dryRun                   = "false"
  useNonNullableAssertions = "true"
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./README.md"
  title    = "nesetjs boilerplate prisma model"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
}

model App {
  id        BigInt   @id @default(autoincrement())
  name      String   @unique
  version   String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("apps")
}

model User {
  id        String     @id @default(uuid())
  email     String
  name      String
  provider  String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  userRoles UserRole[]

  @@map("users")
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  userRoles   UserRole[]

  @@map("roles")
}

model UserRole {
  id        BigInt   @id @default(autoincrement())
  userId    String   @map("user_id")
  roleId    Int      @map("role_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Restrict)

  @@map("user_roles")
}
